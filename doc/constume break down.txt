resource
  size               : 32le can be 0 (see num anim) or the size
                       (sometimes with an offset of one ??)
  header             : 2*8 always contain "CO"
  num anim           : 8  if(size) num_anim++
  format             : 8  bit 7 set means that west anims must NOT be mirrored,
                       bit 0 is the palette size (0: 16 colors, 1: 32 colors)
  palette            : 8*num colors coded in format
  anim cmds offset   : 16le access the anim cmds array

  limbs offset       : 16*16le access limb picture table
  anim offsets       : 16le*num anim  access anim definitions
  
anim
    limb mask        : 16le
    anim definitions : variable length, one definition for each bit set
                       to 1 in the limb mask.
        0xFFFF       : 16le disabled limb code
     OR
        start        : 16le
        noloop       : 1
        end offset   : 7 offset of the last frame, or len-1

anim cmds
    cmd              : 8
  
cell
    image offset     : 16le

image
    width            : 16le
    height           : 16le
    rel_x            : s16le
    rel_y            : s16le
    move_x           : s16le
    move_y           : s16le
    redir_limb       : 8 only present if((format & 0x7E) == 0x60)
    redir_pict       : 8 only present if((format & 0x7E) == 0x60)
    rle data
    

===================================================================================================    
V2
===================================================================================================    
resource
---------------------------------------------------------------------------------------------------
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 

1 1 2 2 3 3 4 4 5 6 7 8 8 9 9 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . A A . . .
    
- - 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
- - 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1
    ^   *             ^   *                                                               *
    1   B             2   F                                                               D

^ = ptr
    

*B = baseptr
*F = frameoffsets (limbs offsets)
*D = dataoffsets
*A = animcmds (*B + #8#)
 
#
1	2 bytes? 		standard resource header

2	2 bytes?		base *1	  "" 		?? 

3	2 bytes le		size
4       2 bytes ?		hdr
5	1 byte			num anims
6 	1 byte			.7 = no mirror; .6-.0 = format

7	1 byte			V2 costume colour 

8	2 bytes le 		anim cmds offset
9	16 * 2bytes le		cells offsets
A	#5# * 2bytes le		anim offsets

---------------------------------------------------------------------------------------------------
anim 
---------------------------------------------------------------------------------------------------
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 ...

1 1 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ...

0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 ...
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3

^

^ = r



#
1	2 bytes le		cells mask

2	for each bit in #2# (high down to low)
		if set 
			get byte to cmdidx
			if cmdidx = $FF
				set seq to end at tick???
			else
				get byte to dur
				lookup cmd from cmdidx
				if cmd = $7A
					set seq to not stopped (paused??) at tick?
				else if cmd = $79
					set seq to stopped at tick?
				else
					add frame to seq to play for ($7F and dur) ticks
					if dur and $80
						set seq to loop
					
---------------------------------------------------------------------------------------------------
anim cmds
---------------------------------------------------------------------------------------------------
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3

1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

0
0
*
A

*A = (*B + resource.#8#)

#
1	?? * 1 byte 		Anim cmds for each cell?
				$7B		- do nothing
				$00 - $79	- render cell

---------------------------------------------------------------------------------------------------
cell
---------------------------------------------------------------------------------------------------
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 ...
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3

1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ...

0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 ...
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
^

^ = frameptr (*B + #9#)

#
1	<= $79 * 2 bytes le	Image offset for anim cmd

---------------------------------------------------------------------------------------------------
image
---------------------------------------------------------------------------------------------------
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 ...

1 1 2 2 3 3 4 4 5 5 6 6 7 . . . . . . . . . . . . . . . . . . . ...

0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 ...
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
^                       *
                        S 

*S = srcptr


#
1	2 bytes le		width
2	2 bytes le		height
3	2 bytes s le		rel_x
4	2 bytes s le		rel_y
5	2 bytes s le		move_x
6	2 bytes s le		move_y
7	n bytes RLE image data